import { StarknetChainId } from '../constants';
import { BlockTag, Call, CallContractResponse, ContractClass, DeclareContractPayload, DeclareContractResponse, DeployContractPayload, DeployContractResponse, EstimateFeeResponse, GetBlockResponse, GetCodeResponse, GetTransactionReceiptResponse, GetTransactionResponse, Invocation, InvocationsDetails, InvokeFunctionResponse } from '../types';
import { BigNumberish } from '../utils/number';
import { ProviderInterface } from './interface';
import { RpcProviderOptions } from './rpc';
import { SequencerProviderOptions } from './sequencer';
import { BlockIdentifier } from './utils';
export interface ProviderOptions {
    sequencer?: SequencerProviderOptions;
    rpc?: RpcProviderOptions;
}
export declare class Provider implements ProviderInterface {
    private provider;
    constructor(providerOrOptions?: ProviderOptions | ProviderInterface);
    get chainId(): StarknetChainId;
    getBlock(blockIdentifier?: BlockIdentifier): Promise<GetBlockResponse>;
    getClassAt(contractAddress: string, blockIdentifier?: BlockIdentifier): Promise<ContractClass>;
    getEstimateFee(invocation: Invocation, blockIdentifier?: BlockIdentifier, invocationDetails?: InvocationsDetails): Promise<EstimateFeeResponse>;
    getStorageAt(contractAddress: string, key: BigNumberish, blockTagOrHash?: BlockTag | BigNumberish): Promise<BigNumberish>;
    getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse>;
    getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse>;
    callContract(request: Call, blockIdentifier?: BlockIdentifier): Promise<CallContractResponse>;
    invokeFunction(functionInvocation: Invocation, details: InvocationsDetails): Promise<InvokeFunctionResponse>;
    deployContract(payload: DeployContractPayload): Promise<DeployContractResponse>;
    declareContract(payload: DeclareContractPayload): Promise<DeclareContractResponse>;
    getCode(contractAddress: string, blockIdentifier?: BlockIdentifier): Promise<GetCodeResponse>;
    waitForTransaction(txHash: BigNumberish, retryInterval?: number): Promise<void>;
}
