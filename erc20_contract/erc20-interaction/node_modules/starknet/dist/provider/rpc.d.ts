import { StarknetChainId } from '../constants';
import { BlockTag, Call, CallContractResponse, DeclareContractPayload, DeclareContractResponse, DeployContractPayload, DeployContractResponse, EstimateFeeResponse, GetBlockResponse, GetTransactionReceiptResponse, GetTransactionResponse, Invocation, InvocationsDetails, InvokeFunctionResponse } from '../types';
import { RPC } from '../types/api';
import { BigNumberish } from '../utils/number';
import { ProviderInterface } from './interface';
import { BlockIdentifier } from './utils';
export declare type RpcProviderOptions = {
    nodeUrl: string;
};
export declare class RpcProvider implements ProviderInterface {
    nodeUrl: string;
    chainId: StarknetChainId;
    private responseParser;
    constructor(optionsOrProvider: RpcProviderOptions);
    protected fetchEndpoint<T extends keyof RPC.Methods>(method: T, request?: RPC.Methods[T]['REQUEST']): Promise<RPC.Methods[T]['RESPONSE']>;
    getChainId(): Promise<StarknetChainId>;
    getBlock(blockIdentifier?: BlockIdentifier): Promise<GetBlockResponse>;
    getStorageAt(contractAddress: string, key: BigNumberish, blockHashOrTag?: BlockTag | BigNumberish): Promise<BigNumberish>;
    getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse>;
    getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse>;
    getClassAt(contractAddress: string, _blockIdentifier?: BlockIdentifier): Promise<any>;
    getEstimateFee(invocation: Invocation, blockIdentifier?: BlockIdentifier, invocationDetails?: InvocationsDetails): Promise<EstimateFeeResponse>;
    declareContract({ contract, version, }: DeclareContractPayload): Promise<DeclareContractResponse>;
    deployContract({ contract, constructorCalldata, addressSalt, }: DeployContractPayload): Promise<DeployContractResponse>;
    invokeFunction(functionInvocation: Invocation, details: InvocationsDetails): Promise<InvokeFunctionResponse>;
    callContract(call: Call, blockIdentifier?: BlockIdentifier): Promise<CallContractResponse>;
    getCode(contractAddress: string, _blockIdentifier?: BlockIdentifier): Promise<RPC.GetCodeResponse>;
    waitForTransaction(txHash: BigNumberish, retryInterval?: number): Promise<void>;
    /**
     * Gets the transaction count from a block.
     *
     *
     * @param blockIdentifier
     * @returns Number of transactions
     */
    getTransactionCount(blockIdentifier: BlockIdentifier): Promise<RPC.GetTransactionCountResponse>;
    /**
     * Gets the latest block number
     *
     *
     * @returns Number of the latest block
     */
    getBlockNumber(): Promise<RPC.GetBlockNumberResponse>;
    /**
     * Gets syncing status of the node
     *
     *
     * @returns Object with the stats data
     */
    getSyncingStats(): Promise<RPC.GetSyncingStatsResponse>;
    /**
     * Gets all the events filtered
     *
     *
     * @returns events and the pagination of the events
     */
    getEvents(eventFilter: RPC.EventFilter): Promise<RPC.GetEventsResponse>;
}
