"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcProvider = void 0;
var fetchPonyfill_1 = __importDefault(require("../utils/fetchPonyfill"));
var hash_1 = require("../utils/hash");
var json_1 = require("../utils/json");
var number_1 = require("../utils/number");
var provider_1 = require("../utils/provider");
var rpc_1 = require("../utils/responseParser/rpc");
var stark_1 = require("../utils/stark");
var RpcProvider = /** @class */ (function () {
    function RpcProvider(optionsOrProvider) {
        var _this = this;
        this.responseParser = new rpc_1.RPCResponseParser();
        var nodeUrl = optionsOrProvider.nodeUrl;
        this.nodeUrl = nodeUrl;
        this.getChainId().then(function (chainId) {
            _this.chainId = chainId;
        });
    }
    RpcProvider.prototype.fetchEndpoint = function (method, request) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var requestData, rawResult, _b, error, result, code, message, error_1, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        requestData = {
                            method: method,
                            jsonrpc: '2.0',
                            params: request,
                            id: 0,
                        };
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, (0, fetchPonyfill_1.default)(this.nodeUrl, {
                                method: 'POST',
                                body: (0, json_1.stringify)(requestData),
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                            })];
                    case 2:
                        rawResult = _c.sent();
                        return [4 /*yield*/, rawResult.json()];
                    case 3:
                        _b = _c.sent(), error = _b.error, result = _b.result;
                        if (error) {
                            code = error.code, message = error.message;
                            throw new Error("".concat(code, ": ").concat(message));
                        }
                        else {
                            return [2 /*return*/, result];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _c.sent();
                        data = (_a = error_1 === null || error_1 === void 0 ? void 0 : error_1.response) === null || _a === void 0 ? void 0 : _a.data;
                        if (data === null || data === void 0 ? void 0 : data.message) {
                            throw new Error("".concat(data.code, ": ").concat(data.message));
                        }
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    RpcProvider.prototype.getChainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_chainId')];
            });
        });
    };
    RpcProvider.prototype.getBlock = function (blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var method;
            return __generator(this, function (_a) {
                method = typeof blockIdentifier === 'string' && (0, number_1.isHex)(blockIdentifier)
                    ? 'starknet_getBlockByHash'
                    : 'starknet_getBlockByNumber';
                return [2 /*return*/, this.fetchEndpoint(method, [blockIdentifier]).then(this.responseParser.parseGetBlockResponse)];
            });
        });
    };
    RpcProvider.prototype.getStorageAt = function (contractAddress, key, blockHashOrTag) {
        if (blockHashOrTag === void 0) { blockHashOrTag = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var parsedKey;
            return __generator(this, function (_a) {
                parsedKey = (0, number_1.toHex)((0, number_1.toBN)(key));
                return [2 /*return*/, this.fetchEndpoint('starknet_getStorageAt', [
                        contractAddress,
                        parsedKey,
                        blockHashOrTag,
                    ])];
            });
        });
    };
    RpcProvider.prototype.getTransaction = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getTransactionByHash', [txHash]).then(this.responseParser.parseGetTransactionResponse)];
            });
        });
    };
    RpcProvider.prototype.getTransactionReceipt = function (txHash) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getTransactionReceipt', [txHash]).then(this.responseParser.parseGetTransactionReceiptResponse)];
            });
        });
    };
    RpcProvider.prototype.getClassAt = function (contractAddress, _blockIdentifier) {
        if (_blockIdentifier === void 0) { _blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getClassAt', [contractAddress])];
            });
        });
    };
    RpcProvider.prototype.getEstimateFee = function (invocation, blockIdentifier, invocationDetails) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        if (invocationDetails === void 0) { invocationDetails = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_estimateFee', [
                        {
                            contract_address: invocation.contractAddress,
                            entry_point_selector: (0, hash_1.getSelectorFromName)(invocation.entrypoint),
                            calldata: (0, provider_1.parseCalldata)(invocation.calldata),
                            signature: (0, number_1.bigNumberishArrayToDecimalStringArray)(invocation.signature || []),
                            version: (0, number_1.toHex)((0, number_1.toBN)((invocationDetails === null || invocationDetails === void 0 ? void 0 : invocationDetails.version) || 0)),
                        },
                        blockIdentifier,
                    ]).then(this.responseParser.parseFeeEstimateResponse)];
            });
        });
    };
    RpcProvider.prototype.declareContract = function (_a) {
        var contract = _a.contract, version = _a.version;
        return __awaiter(this, void 0, void 0, function () {
            var contractDefinition;
            return __generator(this, function (_b) {
                contractDefinition = (0, provider_1.parseContract)(contract);
                return [2 /*return*/, this.fetchEndpoint('starknet_addDeclareTransaction', [
                        {
                            program: contractDefinition.program,
                            entry_points_by_type: contractDefinition.entry_points_by_type,
                        },
                        (0, number_1.toHex)((0, number_1.toBN)(version || 0)),
                    ]).then(this.responseParser.parseDeclareContractResponse)];
            });
        });
    };
    RpcProvider.prototype.deployContract = function (_a) {
        var contract = _a.contract, constructorCalldata = _a.constructorCalldata, addressSalt = _a.addressSalt;
        return __awaiter(this, void 0, void 0, function () {
            var contractDefinition;
            return __generator(this, function (_b) {
                contractDefinition = (0, provider_1.parseContract)(contract);
                return [2 /*return*/, this.fetchEndpoint('starknet_addDeployTransaction', [
                        addressSalt !== null && addressSalt !== void 0 ? addressSalt : (0, stark_1.randomAddress)(),
                        (0, number_1.bigNumberishArrayToDecimalStringArray)(constructorCalldata !== null && constructorCalldata !== void 0 ? constructorCalldata : []),
                        {
                            program: contractDefinition.program,
                            entry_points_by_type: contractDefinition.entry_points_by_type,
                        },
                    ]).then(this.responseParser.parseDeployContractResponse)];
            });
        });
    };
    RpcProvider.prototype.invokeFunction = function (functionInvocation, details) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_addInvokeTransaction', [
                        {
                            contract_address: functionInvocation.contractAddress,
                            entry_point_selector: (0, hash_1.getSelectorFromName)(functionInvocation.entrypoint),
                            calldata: (0, provider_1.parseCalldata)(functionInvocation.calldata),
                        },
                        (0, number_1.bigNumberishArrayToDecimalStringArray)(functionInvocation.signature || []),
                        (0, number_1.toHex)((0, number_1.toBN)(details.maxFee || 0)),
                        (0, number_1.toHex)((0, number_1.toBN)(details.version || 0)),
                    ]).then(this.responseParser.parseInvokeFunctionResponse)];
            });
        });
    };
    RpcProvider.prototype.callContract = function (call, blockIdentifier) {
        if (blockIdentifier === void 0) { blockIdentifier = 'pending'; }
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchEndpoint('starknet_call', [
                            {
                                contract_address: call.contractAddress,
                                entry_point_selector: (0, hash_1.getSelectorFromName)(call.entrypoint),
                                calldata: (0, provider_1.parseCalldata)(call.calldata),
                            },
                            blockIdentifier,
                        ])];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.responseParser.parseCallContractResponse(result)];
                }
            });
        });
    };
    RpcProvider.prototype.getCode = function (contractAddress, _blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchEndpoint('starknet_getCode', [contractAddress])];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.responseParser.parseGetCodeResponse(result)];
                }
            });
        });
    };
    RpcProvider.prototype.waitForTransaction = function (txHash, retryInterval) {
        if (retryInterval === void 0) { retryInterval = 8000; }
        return __awaiter(this, void 0, void 0, function () {
            var onchain, retries, successStates, errorStates, res, message, error, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onchain = false;
                        retries = 100;
                        _a.label = 1;
                    case 1:
                        if (!!onchain) return [3 /*break*/, 7];
                        successStates = ['ACCEPTED_ON_L1', 'ACCEPTED_ON_L2', 'PENDING'];
                        errorStates = ['REJECTED', 'NOT_RECEIVED'];
                        // eslint-disable-next-line no-await-in-loop
                        return [4 /*yield*/, (0, provider_1.wait)(retryInterval)];
                    case 2:
                        // eslint-disable-next-line no-await-in-loop
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.getTransactionReceipt(txHash)];
                    case 4:
                        res = _a.sent();
                        if (successStates.includes(res.status)) {
                            onchain = true;
                        }
                        else if (errorStates.includes(res.status)) {
                            message = res.status;
                            error = new Error(message);
                            error.response = res;
                            throw error;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        error_2 = _a.sent();
                        if (error_2 instanceof Error && errorStates.includes(error_2.message)) {
                            throw error_2;
                        }
                        if (retries === 0) {
                            throw error_2;
                        }
                        return [3 /*break*/, 6];
                    case 6:
                        retries -= 1;
                        return [3 /*break*/, 1];
                    case 7: return [4 /*yield*/, (0, provider_1.wait)(retryInterval)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the transaction count from a block.
     *
     *
     * @param blockIdentifier
     * @returns Number of transactions
     */
    RpcProvider.prototype.getTransactionCount = function (blockIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (typeof blockIdentifier === 'number') {
                    return [2 /*return*/, this.fetchEndpoint('starknet_getBlockTransactionCountByNumber', [blockIdentifier])];
                }
                return [2 /*return*/, this.fetchEndpoint('starknet_getBlockTransactionCountByHash', [blockIdentifier])];
            });
        });
    };
    /**
     * Gets the latest block number
     *
     *
     * @returns Number of the latest block
     */
    RpcProvider.prototype.getBlockNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_blockNumber')];
            });
        });
    };
    /**
     * Gets syncing status of the node
     *
     *
     * @returns Object with the stats data
     */
    RpcProvider.prototype.getSyncingStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_syncing')];
            });
        });
    };
    /**
     * Gets all the events filtered
     *
     *
     * @returns events and the pagination of the events
     */
    RpcProvider.prototype.getEvents = function (eventFilter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchEndpoint('starknet_getEvents', [eventFilter])];
            });
        });
    };
    return RpcProvider;
}());
exports.RpcProvider = RpcProvider;
