"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCResponseParser = void 0;
var number_1 = require("../number");
var _1 = require(".");
var RPCResponseParser = /** @class */ (function (_super) {
    __extends(RPCResponseParser, _super);
    function RPCResponseParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RPCResponseParser.prototype.parseGetBlockResponse = function (res) {
        return {
            accepted_time: res.accepted_time,
            block_hash: res.block_hash,
            block_number: res.block_number,
            gas_price: res.gas_price,
            new_root: res.new_root,
            old_root: res.old_root,
            parent_hash: res.parent_hash,
            sequencer: res.sequencer,
            status: res.status,
            transactions: res.transactions,
        };
    };
    RPCResponseParser.prototype.parseGetTransactionResponse = function (res) {
        return {
            calldata: res.calldata || [],
            contract_address: res.contract_address,
            contract_class: res.contract_class,
            entry_point_selector: res.entry_point_selector,
            max_fee: res.max_fee,
            nonce: res.nonce,
            sender_address: res.sender_address,
            signature: res.signature || [],
            transaction_hash: res.txn_hash,
            version: res.version,
        };
    };
    RPCResponseParser.prototype.parseGetTransactionReceiptResponse = function (res) {
        return {
            transaction_hash: res.txn_hash,
            actual_fee: res.actual_fee,
            status: res.status,
            status_data: res.status_data,
            messages_sent: res.messages_sent,
            l1_origin_message: res.l1_origin_message,
            events: res.events,
        };
    };
    RPCResponseParser.prototype.parseGetCodeResponse = function (res) {
        return res;
    };
    RPCResponseParser.prototype.parseFeeEstimateResponse = function (res) {
        return {
            overall_fee: (0, number_1.toBN)(res.overall_fee),
            gas_consumed: (0, number_1.toBN)(res.gas_consumed),
            gas_price: (0, number_1.toBN)(res.gas_price),
        };
    };
    RPCResponseParser.prototype.parseCallContractResponse = function (res) {
        return {
            result: res,
        };
    };
    RPCResponseParser.prototype.parseInvokeFunctionResponse = function (res) {
        return {
            transaction_hash: res.transaction_hash,
        };
    };
    RPCResponseParser.prototype.parseDeployContractResponse = function (res) {
        return {
            transaction_hash: res.transaction_hash,
            contract_address: res.contract_address,
        };
    };
    RPCResponseParser.prototype.parseDeclareContractResponse = function (res) {
        return {
            transaction_hash: res.transaction_hash,
            class_hash: res.class_hash,
        };
    };
    return RPCResponseParser;
}(_1.ResponseParser));
exports.RPCResponseParser = RPCResponseParser;
