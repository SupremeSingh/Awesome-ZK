import BN from 'bn.js';
import { BlockIdentifier } from '../../provider/utils';
import { BigNumberish } from '../../utils/number';
import { Abi, BlockNumber, EntryPointType, RawCalldata, Signature, Status, TransactionStatus } from '../lib';
import { ContractClass } from '../provider';
export declare type GetTransactionStatusResponse = {
    tx_status: Status;
    block_hash?: string;
    tx_failure_reason?: {
        code: string;
        error_message: string;
    };
};
export declare type GetContractAddressesResponse = {
    Starknet: string;
    GpsStatementVerifier: string;
};
export declare type InvokeFunctionTrace = {
    caller_address: string;
    contract_address: string;
    code_address: string;
    selector: string;
    calldata: RawCalldata;
    result: Array<any>;
    execution_resources: ExecutionResources;
    internal_call: Array<InvokeFunctionTrace>;
    events: Array<any>;
    messages: Array<any>;
};
export declare type ExecutionResources = {
    n_steps: number;
    builtin_instance_counter: {
        pedersen_builtin: number;
        range_check_builtin: number;
        bitwise_builtin: number;
        output_builtin: number;
        ecdsa_builtin: number;
        ec_op_builtin?: number;
    };
    n_memory_holes: number;
};
export declare type GetTransactionTraceResponse = {
    function_invocation: {
        caller_address: string;
        contract_address: string;
        code_address: string;
        selector: string;
        calldata: RawArgs;
        result: Array<any>;
        execution_resources: ExecutionResources;
        internal_call: Array<any>;
        events: Array<any>;
        messages: Array<any>;
    };
    signature: Signature;
};
export declare type RawArgs = {
    [inputName: string]: string | string[] | {
        type: 'struct';
        [k: string]: BigNumberish;
    };
};
export declare namespace Sequencer {
    type DeclareTransaction = {
        type: 'DECLARE';
        contract_class: ContractClass;
        nonce: BigNumberish;
        sender_address: BigNumberish;
        signature: Signature;
    };
    type DeployTransaction = {
        type: 'DEPLOY';
        contract_definition: ContractClass;
        contract_address_salt: BigNumberish;
        constructor_calldata: string[];
        nonce?: BigNumberish;
    };
    type InvokeFunctionTransaction = {
        type: 'INVOKE_FUNCTION';
        contract_address: string;
        signature?: Signature;
        entry_point_type?: EntryPointType;
        entry_point_selector: string;
        calldata?: RawCalldata;
        nonce?: BigNumberish;
        max_fee?: BigNumberish;
        version?: BigNumberish;
    };
    type Transaction = DeclareTransaction | DeployTransaction | InvokeFunctionTransaction;
    type AddTransactionResponse = {
        transaction_hash: string;
        code?: TransactionStatus;
        address?: string;
        class_hash?: string;
    };
    type GetCodeResponse = {
        bytecode: string[];
        abi: Abi;
    };
    interface InvokeFunctionTransactionResponse extends InvokeFunctionTransaction {
        transaction_hash: string;
    }
    type TransactionResponse = DeclareTransaction | DeployTransaction | InvokeFunctionTransactionResponse;
    type SuccessfulTransactionResponse = {
        status: Status;
        transaction: TransactionResponse;
        block_hash: string;
        block_number: BlockNumber;
        transaction_index: number;
    };
    type FailedTransactionResponse = {
        status: 'REJECTED';
        transaction_failure_reason: {
            code: string;
            error_message: string;
        };
        transaction: TransactionResponse;
    };
    type GetTransactionResponse = SuccessfulTransactionResponse | FailedTransactionResponse;
    type TransactionReceiptResponse = SuccessfulTransactionReceiptResponse | FailedTransactionReceiptResponse;
    type SuccessfulTransactionReceiptResponse = {
        status: Status;
        transaction_hash: string;
        transaction_index: number;
        block_hash: string;
        block_number: BlockNumber;
        l2_to_l1_messages: string[];
        events: string[];
        actual_fee: string;
        execution_resources: ExecutionResources;
    };
    type FailedTransactionReceiptResponse = {
        status: 'REJECTED';
        transaction_failure_reason: {
            code: string;
            error_message: string;
        };
        transaction_hash: string;
        l2_to_l1_messages: string[];
        events: string[];
    };
    type GetBlockResponse = {
        block_number: number;
        state_root: string;
        block_hash: string;
        transactions: {
            [txHash: string]: TransactionResponse;
        };
        timestamp: number;
        transaction_receipts: {
            [txHash: string]: {
                block_hash: string;
                transaction_hash: string;
                l2_to_l1_messages: {
                    to_address: string;
                    payload: string[];
                    from_address: string;
                }[];
                block_number: BlockNumber;
                status: Status;
                transaction_index: number;
            };
        };
        parent_block_hash: string;
        status: Status;
        gas_price: string;
        sequencer_address: string;
    };
    type CallContractTransaction = Omit<InvokeFunctionTransaction, 'type' | 'entry_point_type' | 'nonce'>;
    type CallContractResponse = {
        result: string[];
    };
    type EstimateFeeResponse = {
        overall_fee: number;
        gas_price: number;
        gas_usage: number;
    } | {
        amount: BN;
        unit: string;
    };
    type Endpoints = {
        get_contract_addresses: {
            QUERY: never;
            REQUEST: never;
            RESPONSE: GetContractAddressesResponse;
        };
        add_transaction: {
            QUERY: never;
            REQUEST: Transaction;
            RESPONSE: AddTransactionResponse;
        };
        get_transaction: {
            QUERY: {
                transactionHash: string;
            };
            REQUEST: never;
            RESPONSE: GetTransactionResponse;
        };
        get_transaction_status: {
            QUERY: {
                transactionHash: string;
            };
            REQUEST: never;
            RESPONSE: GetTransactionStatusResponse;
        };
        get_transaction_trace: {
            QUERY: {
                transactionHash: string;
            };
            REQUEST: never;
            RESPONSE: GetTransactionTraceResponse;
        };
        get_transaction_receipt: {
            QUERY: {
                transactionHash: string;
            };
            REQUEST: never;
            RESPONSE: TransactionReceiptResponse;
        };
        get_storage_at: {
            QUERY: {
                contractAddress: string;
                key: BigNumberish;
                blockIdentifier: BlockIdentifier;
            };
            REQUEST: never;
            RESPONSE: string;
        };
        get_code: {
            QUERY: {
                contractAddress: string;
                blockIdentifier: BlockIdentifier;
            };
            REQUEST: never;
            RESPONSE: GetCodeResponse;
        };
        get_block: {
            QUERY: {
                blockIdentifier: BlockIdentifier;
            };
            REQUEST: never;
            RESPONSE: GetBlockResponse;
        };
        call_contract: {
            QUERY: {
                blockIdentifier: BlockIdentifier;
            };
            REQUEST: CallContractTransaction;
            RESPONSE: CallContractResponse;
        };
        estimate_fee: {
            QUERY: {
                blockIdentifier: BlockIdentifier;
            };
            REQUEST: CallContractTransaction;
            RESPONSE: EstimateFeeResponse;
        };
        get_class_by_hash: {
            QUERY: {
                classHash: string;
            };
            REQUEST: never;
            RESPONSE: any;
        };
        get_class_hash_at: {
            QUERY: {
                contractAddress: string;
                blockIdentifier?: BlockIdentifier;
            };
            REQUEST: never;
            RESPONSE: string;
        };
        get_state_update: {
            QUERY: {
                blockHash: string;
            };
            REQUEST: never;
            RESPONSE: any;
        };
        get_full_contract: {
            QUERY: {
                contractAddress: string;
                blockIdentifier?: BlockIdentifier;
            };
            REQUEST: never;
            RESPONSE: any;
        };
    };
}
